"""
FastAPI endpoints for the RCAccelerator API.
"""
from typing import Dict, Any
from fastapi import FastAPI, Body
from pydantic import BaseModel, Field
from chat import handle_user_message_api
from config import config
from settings import ModelSettings

app = FastAPI(title="RCAccelerator API")


class ChatRequest(BaseModel):
    content: str
    similarity_threshold: float = Field(
        config.search_similarity_threshold,
        gt=0.0,
        le=1.0
        )
    temperature: float = Field(
        config.default_temperature,
        gt=0.1,
        le=1.0
    )
    max_tokens: int = Field(
        config.default_max_tokens,
        gt=1,
        le=1024
    )


@app.post("/prompt")
async def process_prompt(message_data: ChatRequest) -> Dict[str, Any]:
    """
    FastAPI endpoint that processes a message and returns an answer.

    Args:
        message_data: BaseModel class containing the message content

    Returns:
        The response generated by the chat handler
    """

    model_settings: ModelSettings = {
        "model": config.generative_model,
        "max_tokens": message_data.max_tokens,
        "temperature": message_data.temperature,
    }
    response = await handle_user_message_api(
        message_data.content,
        message_data.similarity_threshold,
        model_settings
        )

    return  {
        "response": getattr(response, "content", ""),
        "urls": getattr(response, "urls", [])
    }
